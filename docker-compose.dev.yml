services:
  traefik:
    image: "traefik:latest"
    container_name: traefik
    restart: unless-stopped
    command:
      # - --metrics
      # - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      - "--providers.file.filename=/traefik.yml"
      # - --accesslog=true
      # - --accesslog.filepath=/var/log/traefik/access.log
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
      - "389:389"
      - "636:636"
      - "88:88"
      - "749:749"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./certs:/letsencrypt
      - ".package/traefik.yml:/traefik.yml"

    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 32M

  interface:
    container_name: multidirectory_interface
    build:
      context: ./interface
      dockerfile: configurations/docker/Dockerfile.dev
      args:
        - API_URL=https://${DOMAIN}/api
    restart: unless-stopped
    environment:
      - HUSKY=0
      - API_URL=https://${DOMAIN}/api
      - NODE_ENV=development
    ports:
      - 9080:80
    working_dir: /app
    command:  ng serve --host 0.0.0.0 --port 80 --poll 2000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.interface.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.interface.entrypoints=websecure"
      - "traefik.http.routers.interface.tls=true"
      - "traefik.http.routers.interface.tls.certresolver=md-resolver"
      - "traefik.http.services.interface.loadbalancer.server.port=80"

  cert_check:
    image: multidirectory
    container_name: multidirectory_certs_check
    restart: "no"
    volumes:
      - ./certs:/certs
      - ./app:/app
    command: ./extra/generate_cert.sh

  migrations:
    image: multidirectory
    container_name: multidirectory_migrations
    restart: "no"
    environment:
      DEBUG: 1
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 4002afa6900c4072a5577a30de99633e
      SECRET_KEY: 6a0452ae20cab4e21b6e9d18fa4b7bf397dd66ec3968b2d74
      DOMAIN: ${DOMAIN}
    command: alembic upgrade head
    depends_on:
      postgres:
        condition: service_healthy

  ldap_server:
    build:
      context: .
      dockerfile: .docker/Dockerfile
      args:
        DOCKER_BUILDKIT: 1
      target: runtime
    image: multidirectory
    restart: unless-stopped
    hostname: multidirectory
    volumes:
      - ./certs:/certs
      - ./logs:/app/logs
    command: python multidirectory.py --ldap
    tty: true
    environment:
      DEBUG: 1
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 4002afa6900c4072a5577a30de99633e
      SECRET_KEY: 6a0452ae20cab4e21b6e9d18fa4b7bf397dd66ec3968b2d74
      MFA_API_SOURCE: dev
      DOMAIN: ${DOMAIN}
    depends_on:
      migrations:
        condition: service_completed_successfully
    deploy:
      mode: replicated
      replicas: 4
      endpoint_mode: dnsrr
      resources:
        reservations:
          cpus: '0.25'
          memory: 100M
    labels:
      - traefik.enable=true

      - traefik.tcp.routers.ldap.rule=HostSNI(`*`)
      - traefik.tcp.routers.ldap.entrypoints=ldap
      - traefik.tcp.routers.ldap.service=ldap
      - traefik.tcp.services.ldap.loadbalancer.server.port=389
      - traefik.tcp.services.ldap.loadbalancer.proxyprotocol.version=2

      - traefik.tcp.routers.ldaps.rule=HostSNI(`*`)
      - traefik.tcp.routers.ldaps.entrypoints=ldaps
      - traefik.tcp.routers.ldaps.service=ldaps
      - traefik.tcp.routers.ldaps.tls=true
      - traefik.tcp.routers.ldaps.tls.certresolver=md-resolver
      - traefik.tcp.services.ldaps.loadbalancer.server.port=636
      - traefik.tcp.services.ldaps.loadbalancer.proxyprotocol.version=2
    healthcheck:
      test: ["CMD-SHELL", "nc -zv 127.0.0.1 389 636"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 3s

  api_server:
    image: multidirectory
    container_name: multidirectory_api
    restart: unless-stopped
    environment:
      USE_CORE_TLS: 1
      DEBUG: 1
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 4002afa6900c4072a5577a30de99633e
      SECRET_KEY: 6a0452ae20cab4e21b6e9d18fa4b7bf397dd66ec3968b2d74
      MFA_API_SOURCE: dev
      DOMAIN: ${DOMAIN}
    hostname: api_server
    volumes:
      - ./app:/app
      - ./certs:/certs
      - ./logs:/app/logs
      - d_dns_server_file:/DNS_server_file/
      - d_dns_server_config:/DNS_server_configs/
      - d_ldap_keytab:/LDAP_keytab/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.tls.certresolver=md-resolver"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.routers.api.middlewares=api_strip"
      - "traefik.http.middlewares.api_strip.stripprefix.prefixes=/api"
      - "traefik.http.middlewares.api_strip.stripprefix.forceslash=false"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https,wss"

    command:  python multidirectory.py --http
    depends_on:
      migrations:
        condition: service_completed_successfully

  shadow_api:
    image: multidirectory
    container_name: shadow_api
    restart: unless-stopped
    tty: true
    depends_on:
      migrations:
        condition: service_completed_successfully
      ldap_server:
        condition: service_healthy
        restart: true
    volumes:
      - ./app:/app
      - ./certs:/certs
    env_file:
      local.env
    command: python multidirectory.py --shadow

  postgres:
    container_name: MD-postgres
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 4002afa6900c4072a5577a30de99633e
      PGDATA: /data/postgres
    volumes:
       - d_postgres:/data/postgres
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U user"]
      interval: 1s
      timeout: 15s
      retries: 10
      start_period: 3s

  kdc:
    build:
      context: .
      dockerfile: ./.docker/krb.Dockerfile
      args:
        VERSION: beta
    container_name: kdc
    restart: unless-stopped
    hostname: kerberos
    volumes:
      - d_keyfile:/etc/krb5.d/
      - d_kdc:/etc
    image: krb5md
    tty: true
    depends_on:
      - ldap_server
    command: krb5kdc -n -w 4

    labels:
      - traefik.enable=true
      - traefik.tcp.routers.kdc.rule=HostSNI(`*`)
      - traefik.tcp.routers.kdc.entrypoints=kdc
      - traefik.tcp.routers.kdc.service=kdc
      - traefik.tcp.services.kdc.loadbalancer.server.port=88

  kadmin_api:
    image: krb5md
    container_name: kadmin-api
    restart: unless-stopped
    volumes:
      - ./certs:/certs
      - d_keyfile:/etc/krb5.d/
      - .kerberos/:/server/
      - d_kdc:/etc
    tty: true
    depends_on:
      ldap_server:
        condition: service_healthy
      cert_check:
        condition: service_completed_successfully
    ports:
      - 8000:8000
    working_dir: /server
    command: uvicorn --factory config_server:create_app
             --host 0.0.0.0 --ssl-keyfile=/certs/krbkey.pem
             --ssl-certfile=/certs/krbcert.pem
             --reload

  kadmind:
    container_name: kadmind
    restart: unless-stopped
    hostname: kerberos
    volumes:
      - d_keyfile:/etc/krb5.d/
      - d_kdc:/etc
    image: krb5md
    tty: true
    depends_on:
      - ldap_server
      - kdc
    command: kadmind -nofork
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.kadmind.rule=HostSNI(`*`)
      - traefik.tcp.routers.kadmind.entrypoints=kadmind
      - traefik.tcp.routers.kadmind.service=kadmind
      - traefik.tcp.services.kadmind.loadbalancer.server.port=749

  dragonfly:
    image: 'docker.dragonflydb.io/dragonflydb/dragonfly'
    container_name: dragonfly
    expose:
      - 6379
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5GiB
        reservations:
          cpus: '0.25'
          memory: 0.5GiB

  bind_dns:
    image: ubuntu/bind9:latest
    container_name: bind9
    hostname: bind9
    restart: unless-stopped
    volumes:
      - d_dns_server_file:/opt/
      - d_dns_server_config:/etc/bind/
    tty: true
    depends_on:
      ldap_server:
        condition: service_healthy
        restart: true
    command: bash -c "chown bind:bind /opt && test -f /opt/zone.key && echo 'KEY EXISTS, SKIPPING...' || tsig-keygen zone. > /opt/zone.key && source docker-entrypoint.sh"
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.bind_dns.rule=HostSNI(`${DOMAIN}`)
      - traefik.tcp.routers.bind_dns.entrypoints=bind_dns
      - traefik.tcp.routers.bind_dns.service=bind_dns
      - traefik.tcp.services.bind_dns.loadbalancer.server.port=53

volumes:
  d_postgres:
  d_pgadmin:
  d_keyfile:
  d_kdc:
  d_dns_server_file:
  d_dns_server_config:
  d_ldap_keytab:
