# For local development
# Copyright (c) 2024 MultiFactor
# License: https://github.com/MultiDirectoryLab/MultiDirectory/blob/main/LICENSE
services:
  traefik:
    image: "traefik:v2.6"
    container_name: "traefik"
    command:
      - "--log.level=INFO"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.ldap.address=:389"
      - "--entrypoints.kdc.address=:88"
      - "--entrypoints.ldaps.address=:636"
      - "--entrypoints.kadmind.address=:749"
    ports:
      - "80:80"
      - "8080:8080"
      - "389:389"
      - "636:636"
      - "88:88"
      - "749:749"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  ldap_server:
    build:
      context: .
      dockerfile: ./.docker/dev.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
      target: runtime
    image: multidirectory
    restart: unless-stopped
    # container_name: multidirectory
    volumes:
      - ./app:/app
      - ./certs:/certs
      - dns_server_file:/DNS_SERVER_FILE/
      - dns_server_config:/DNS_SERVER_CONFIGS/
    env_file:
      local.env
    command: python -OO . --loop uvloop
    tty: true
    depends_on:
      migrations:
        condition: service_completed_successfully
      cert_local_check:
        condition: service_completed_successfully
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr
      resources:
        limits:
          cpus: '1.0'
          memory: 100M
        reservations:
          cpus: '0.25'
          memory: 20M
    labels:
      - traefik.enable=true

      - traefik.tcp.routers.ldap.rule=HostSNI(`*`)
      - traefik.tcp.routers.ldap.entrypoints=ldap
      - traefik.tcp.routers.ldap.service=ldap
      - traefik.tcp.services.ldap.loadbalancer.server.port=389

      - traefik.tcp.routers.ldaps.rule=HostSNI(`*`)
      - traefik.tcp.routers.ldaps.entrypoints=ldaps
      - traefik.tcp.routers.ldaps.service=ldaps
      - traefik.tcp.services.ldaps.loadbalancer.server.port=636
    healthcheck:
      test: ["CMD-SHELL", "nc -zv 127.0.0.1 389 636"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 3s

  api:
    image: multidirectory
    container_name: multidirectory_api
    volumes:
      - ./app:/app
      - ./certs:/certs
      - dns_server_file:/DNS_SERVER_FILE/
      - dns_server_config:/DNS_SERVER_CONFIGS/
    env_file:
      local.env
    command: uvicorn --factory web_app:create_prod_app --host 0.0.0.0 --reload --loop uvloop
    tty: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`md.localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.routers.api.middlewares=api_strip"
      - "traefik.http.middlewares.api_strip.stripprefix.prefixes=/api"
      - "traefik.http.middlewares.api_strip.stripprefix.forceslash=false"
    depends_on:
      migrations:
        condition: service_completed_successfully

    deploy:
      mode: global
      resources:
        limits:
          cpus: '0.50'
          memory: 150M

  migrations:
    image: multidirectory
    container_name: multidirectory_migrations
    restart: "no"
    volumes:
      - ./app:/app
    env_file:
      local.env
    command: alembic upgrade head
    depends_on:
      postgres:
        condition: service_healthy

  cert_check:
    image: multidirectory
    container_name: multidirectory_certs_check
    restart: "no"
    volumes:
      - ./certs:/certs
      - ./app:/app
    command: ./extra/generate_cert.sh

  cert_local_check:
    image: multidirectory
    container_name: multidirectory_local_certs_check
    restart: "no"
    volumes:
      - ./certs:/certs
    command: bash -c "test -f /certs/cert.pem && echo 'CERT EXISTS, SKIPPING...' || openssl req -nodes -new -x509 -keyout /certs/privkey.pem -out /certs/cert.pem -subj '/C=RU/ST=Moscow/L=Moscow/O=Global Security/OU=Multifactor/CN=md.multifactor.dev'";

  postgres:
    container_name: MD-postgres
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: user1
      POSTGRES_PASSWORD: password123
      PGDATA: /data/postgres
    volumes:
       - postgres:/data/postgres
    expose:
      - 5432

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U user1"]
      interval: 1s
      timeout: 15s
      retries: 10
      start_period: 3s

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
       - pgadmin:/var/lib/pgadmin
    restart: unless-stopped
    logging:
      driver: "none"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pg.rule=Host(`pg.localhost`)"
      - "traefik.http.routers.pg.entrypoints=web"
      - "traefik.http.services.pg.loadbalancer.server.port=80"

  kadmin_api:
    image: krb5md
    container_name: kadmin_api
    restart: unless-stopped
    volumes:
      - ./certs:/certs
      - keyfile:/etc/krb5.d/
      - .kerberos/:/server/
      - kdc:/etc
    tty: true
    depends_on:
      ldap_server:
        condition: service_healthy
        restart: true
      cert_check:
        condition: service_completed_successfully
    ports:
      - 8000:8000
    working_dir: /server
    command: uvicorn --factory config_server:create_app
             --host 0.0.0.0 --ssl-keyfile=/certs/krbkey.pem
             --ssl-certfile=/certs/krbcert.pem
             --reload

  bind_dns:
    build:
      context: .
      dockerfile: ./.docker/bind_dns.Dockerfile
    container_name: bind9
    hostname: bind9
    restart: unless-stopped
    volumes:
      - dns_server_file:/opt/
      - dns_server_config:/etc/bind/
    tty: true
    depends_on:
      ldap_server:
        condition: service_healthy
        restart: true

  kdc:
    build:
      context: .
      dockerfile: ./.docker/krb.Dockerfile
    container_name: kdc
    hostname: kerberos
    restart: unless-stopped
    volumes:
      - keyfile:/etc/krb5.d/
      - kdc:/etc
    image: krb5md
    tty: true
    command: /usr/sbin/krb5kdc -n -w 4
    depends_on:
      ldap_server:
        condition: service_healthy
        restart: true
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.kdc.rule=HostSNI(`*`)
      - traefik.tcp.routers.kdc.entrypoints=kdc
      - traefik.tcp.routers.kdc.service=kdc
      - traefik.tcp.services.kdc.loadbalancer.server.port=88

  kadmind:
    container_name: kadmind
    restart: unless-stopped
    hostname: kerberos
    volumes:
      - keyfile:/etc/krb5.d/
      - kdc:/etc
      - psync_queue:/var/spool/krb5-sync
    image: krb5md
    tty: true
    command: kadmind -nofork
    depends_on:
      ldap_server:
        condition: service_healthy
        restart: true
      kdc:
        condition: service_started
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.kadmind.rule=HostSNI(`*`)
      - traefik.tcp.routers.kadmind.entrypoints=kadmind
      - traefik.tcp.routers.kadmind.service=kadmind
      - traefik.tcp.services.kadmind.loadbalancer.server.port=749

  maintence:
    image: multidirectory
    container_name: md_maintence
    volumes:
      - ./certs:/certs
      - ./app:/app
      - psync_queue:/var/spool/krb5-sync
    env_file:
      local.env
    command: python schedule.py
    tty: true
    depends_on:
      migrations:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 100M
        reservations:
          cpus: '0.1'
          memory: 6M

  interface:
    build:
      context: ./interface
      dockerfile: ./configurations/docker/Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    container_name: multidirectory_interface
    restart: "no"
    hostname: interface
    env_file:
      local.env
    environment:
      API_URL: http://md.localhost/api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.interface.rule=Host(`md.localhost`)"
      - "traefik.http.routers.interface.entrypoints=web"
      - "traefik.http.services.interface.loadbalancer.server.port=80"

volumes:
  postgres:
  pgadmin:
  wireshark:
  keyfile:
  kdc:
  psync_queue:
  dns_server_file:
  dns_server_config: