"""Modify LDAP schema.

Revision ID: b6cb962ecfac
Revises: 275222846605
Create Date: 2025-03-21 09:45:59.460969

"""

from alembic import op
from sqlalchemy.ext.asyncio import AsyncSession

from ldap_protocol.ldap_schema.attribute_type_crud import (
    create_attribute_type,
    get_attribute_types_by_names,
)
from ldap_protocol.ldap_schema.object_class_crud import (
    get_object_class_by_name,
)

# revision identifiers, used by Alembic.
revision = "b6cb962ecfac"
down_revision = "275222846605"
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(
        "AttributeTypes_oid_uc", "AttributeTypes", ["oid"]
    )
    op.create_unique_constraint(
        "ObjectClasses_oid_uc", "ObjectClasses", ["oid"]
    )
    # ### end Alembic commands ###

    async def _create_attribute_types(connection):
        session = AsyncSession(bind=connection)
        await session.begin()

        await create_attribute_type(
            oid="2.16.840.1.113730.3.1.610",
            name="nsAccountLock",
            syntax="1.3.6.1.4.1.1466.115.121.1.15",
            single_value=True,
            no_user_modification=True,
            is_system=True,
            session=session,
        )
        await create_attribute_type(
            oid="1.3.6.1.4.1.99999.1.3",
            name="posixEmail",
            syntax="1.3.6.1.4.1.1466.115.121.1.15",
            single_value=True,
            no_user_modification=True,
            is_system=True,
            session=session,
        )
        await session.commit()

    op.run_async(_create_attribute_types)

    async def _modify_object_classes(connection):
        session = AsyncSession(bind=connection)
        await session.begin()

        object_class_user = await get_object_class_by_name(
            object_class_name="user",
            session=session,
        )
        attribute_types_must = await get_attribute_types_by_names(
            attribute_type_names=("nsAccountLock", "shadowExpire"),
            session=session,
        )
        object_class_user.attribute_types_must.extend(attribute_types_must)
        await session.commit()

        object_class_computer = await get_object_class_by_name(
            object_class_name="computer",
            session=session,
        )
        attribute_types_must = await get_attribute_types_by_names(
            attribute_type_names=("userAccountControl",),
            session=session,
        )
        object_class_computer.attribute_types_must.extend(attribute_types_must)
        await session.commit()

        object_class_posix_account = await get_object_class_by_name(
            object_class_name="posixAccount",
            session=session,
        )
        attribute_types_may = await get_attribute_types_by_names(
            attribute_type_names=("posixEmail",),
            session=session,
        )
        object_class_posix_account.attribute_types_must.extend(
            attribute_types_may
        )
        await session.commit()

        object_class_org_unit = await get_object_class_by_name(
            object_class_name="organizationalUnit",
            session=session,
        )
        attribute_types_may = await get_attribute_types_by_names(
            attribute_type_names=("title", "jpegPhoto"),
            session=session,
        )
        object_class_org_unit.attribute_types_must.extend(attribute_types_may)
        await session.commit()

    op.run_async(_modify_object_classes)


def downgrade() -> None:
    """Downgrade."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("ObjectClasses_oid_uc", "ObjectClasses", type_="unique")
    op.drop_constraint(
        "AttributeTypes_oid_uc",
        "AttributeTypes",
        type_="unique",
    )
    # ### end Alembic commands ###
