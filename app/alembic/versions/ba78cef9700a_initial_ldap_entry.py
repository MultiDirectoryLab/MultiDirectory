"""Initial LDAP entry.

Revision ID: ba78cef9700a
Revises: 275222846605
Create Date: 2025-05-15 11:54:03.712099

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import Session, defaultload

from ldap_protocol.ldap_schema.entry_crud import (
    create_entry,
    get_entry_by_name,
)
from models import Directory

# revision identifiers, used by Alembic.
revision = "ba78cef9700a"
down_revision = "275222846605"
branch_labels = None
depends_on = None


def calculate_entry(
    directory_name: str, object_class_names: list[str]
) -> list[str]:
    """Calc entry."""
    res = []
    if "domain" in object_class_names:
        res.append("Домен")
    if "computer" in object_class_names:
        res.append("Компьютер")
    if {"top", "container"}.issubset(object_class_names):
        res.append("Группа_1")
    if "catalog" in object_class_names:
        res.append("Каталог")
    if "organizationalUnit" in object_class_names:
        res.append("Организационное подразделение")
    if {
        "top",
        "user",
        "person",
        "organizationalPerson",
        "posixAccount",
        "shadowAccount",
    }.issubset(object_class_names) and directory_name == "admin":
        res.append("Админ")
    if {"top", "posixGroup", "group"}.issubset(object_class_names):
        res.append("Группа_2")
    if "sudoRole" in object_class_names:
        res.append("Роль")
    if {
        "top",
        "user",
        "person",
        "organizationalPerson",
        "posixAccount",
        "shadowAccount",
    }.issubset(object_class_names) and directory_name != "admin":
        res.append("Пользователь")
    if {
        "top",
        "user",
        "person",
        "organizationalPerson",
        "posixAccount",
        "shadowAccount",
        "inetOrgPerson",
    }.issubset(object_class_names):
        res.append("KRB Админ")


def upgrade() -> None:
    """Upgrade database schema and data, creating LDAP entries."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "Entries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("is_system", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_Entries_name"),
        "Entries",
        ["name"],
        unique=True,
    )

    op.create_table(
        "EntryObjectClassMemberships",
        sa.Column("entry_id", sa.Integer(), nullable=False),
        sa.Column("object_class_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["entry_id"],
            ["Entries.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["object_class_id"],
            ["ObjectClasses.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("entry_id", "object_class_id"),
    )

    op.add_column(
        "Directory",
        sa.Column("entry_id", sa.Integer(), nullable=True),
    )
    op.create_index(
        op.f("ix_Directory_entry_id"),
        "Directory",
        ["entry_id"],
        unique=False,
    )
    op.create_foreign_key(
        "Directory_entry_id_fkey",
        "Directory",
        "Entries",
        ["entry_id"],
        ["id"],
        ondelete="SET NULL",
    )

    op.drop_index("ix_AttributeTypes_oid", table_name="AttributeTypes")
    op.create_unique_constraint(
        "AttributeTypes_oid_uc",
        "AttributeTypes",
        ["oid"],
    )

    op.drop_index("ix_ObjectClasses_oid", table_name="ObjectClasses")
    op.create_unique_constraint(
        "ObjectClasses_oid_uc",
        "ObjectClasses",
        ["oid"],
    )
    # ### end Alembic commands ###
    bind = op.get_bind()
    Session(bind=bind)

    entry_datas = (
        ("Домен", "md.localhost", "top, domain, domainDNS"),
        ("Компьютер", "computer_123", "top, computer"),
        ("Группа_1", "groups", "top, container"),
        ("Каталог", "catalog_123", "top, container, catalog"),
        (
            "Организационное подразделение",
            "org_unit_123",
            "top, container, organizationalUnit",
        ),
        (
            "Админ",
            "admin",
            "top, person, organizationalPerson, posixAccount, shadowAccount, user",
        ),
        ("Группа_2", "group", "top, posixGroup, group"),
        ("Роль", "role_123", "top, sudoRole"),
        (
            "Пользователь",
            "user_123",
            "top, user, person, organizationalPerson, posixAccount, shadowAccount",
        ),
        (
            "KRB Админ",
            "krbadmin",
            "top, user, person, organizationalPerson, posixAccount, shadowAccount, inetOrgPerson",
        ),
    )

    async def _create_entry(connection):
        session = AsyncSession(bind=connection)
        await session.begin()

        for entry_data in entry_datas:
            await create_entry(
                name=entry_data[0],
                is_system=True,
                object_class_names=entry_data[2].split(", "),
                session=session,
            )

    op.run_async(_create_entry)

    async def _attach_entry_to_directories(connection):
        session = AsyncSession(bind=connection)
        await session.begin()

        query = select(Directory).options(
            defaultload(Directory.attributes),
        )
        result = await session.scalars(query)
        directories: list[Directory] = result.all()

        for directory in directories:
            object_class_names = [
                attribute.value
                for attribute in directory.attributes
                if attribute.name == "objectClass"
            ]
            entry_names = calculate_entry(directory.name, object_class_names)

            if len(entry_names) > 1:
                raise Exception(f"entry_names to long: {entry_names}")

            directory.entry = await get_entry_by_name(entry_names[0], session)

    op.run_async(_attach_entry_to_directories)


def downgrade() -> None:
    """Downgrade database schema and data back to the previous state."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("ObjectClasses_oid_uc", "ObjectClasses", type_="unique")
    op.create_index(
        "ix_ObjectClasses_oid",
        "ObjectClasses",
        ["oid"],
        unique=True,
    )

    op.drop_constraint(
        "Directory_entry_id_fkey",
        "Directory",
        type_="foreignkey",
    )
    op.drop_index(op.f("ix_Directory_entry_id"), table_name="Directory")
    op.drop_column("Directory", "entry_id")

    op.drop_constraint(
        "AttributeTypes_oid_uc",
        "AttributeTypes",
        type_="unique",
    )
    op.create_index(
        "ix_AttributeTypes_oid",
        "AttributeTypes",
        ["oid"],
        unique=True,
    )

    op.drop_table("EntryObjectClassMemberships")
    op.drop_table("Entries")
    # ### end Alembic commands ###
