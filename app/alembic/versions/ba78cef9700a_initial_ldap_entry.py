"""Initial LDAP entry.

Revision ID: ba78cef9700a
Revises: 275222846605
Create Date: 2025-05-15 11:54:03.712099

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision = "ba78cef9700a"
down_revision = "275222846605"
branch_labels = None
depends_on = None


def has_column(table_name: str, column_name: str, bind) -> bool:
    """Check if a column exists in a table."""
    inspector = inspect(bind)
    columns = [col["name"] for col in inspector.get_columns(table_name)]
    return bool(column_name in columns)


def upgrade() -> None:
    """Upgrade database schema and data, creating LDAP entries."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "Entries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("is_system", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_Entries_name"),
        "Entries",
        ["name"],
        unique=True,
    )

    op.create_table(
        "EntryObjectClassMemberships",
        sa.Column("entry_id", sa.Integer(), nullable=False),
        sa.Column("object_class_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["entry_id"],
            ["Entries.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["object_class_id"],
            ["ObjectClasses.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("entry_id", "object_class_id"),
    )

    if not has_column("Directory", "entry_id", op.get_bind()):
        op.add_column(
            "Directory",
            sa.Column("entry_id", sa.Integer(), nullable=True),
        )

    op.create_index(
        op.f("ix_Directory_entry_id"),
        "Directory",
        ["entry_id"],
        unique=False,
    )
    op.create_foreign_key(
        "Directory_entry_id_fkey",
        "Directory",
        "Entries",
        ["entry_id"],
        ["id"],
        ondelete="SET NULL",
    )

    op.drop_index("ix_AttributeTypes_oid", table_name="AttributeTypes")
    op.create_unique_constraint(
        "AttributeTypes_oid_uc",
        "AttributeTypes",
        ["oid"],
    )

    # TODO а это нужно?
    # op.alter_column(
    #     "ObjectClasses",
    #     "kind",
    #     existing_type=postgresql.ENUM(
    #         "AUXILIARY",
    #         "STRUCTURAL",
    #         "ABSTRACT",
    #         name="objectclasskinds",
    #     ),
    #     type_=sa.Enum(
    #         "STRUCTURAL",
    #         "ABSTRACT",
    #         "AUXILIARY",
    #         native_enum=False,
    #         name="objectclasskinds",
    #     ),
    #     existing_nullable=False,
    # )
    op.drop_index("ix_ObjectClasses_oid", table_name="ObjectClasses")
    op.create_unique_constraint(
        "ObjectClasses_oid_uc",
        "ObjectClasses",
        ["oid"],
    )
    # ### end Alembic commands ###

    # 1 create entries()
    #   private static TypeNameMap = new Map<LdapEntryType, () => string>([
    #     [LdapEntryType.None, () => ''],
    #     [LdapEntryType.Folder, () => translate('entity-info-resolver.catalog')],
    #     [LdapEntryType.Root, () => translate('entity-info-resolver.root')],
    #     [LdapEntryType.Server, () => translate('entity-info-resolver.domain-controller')],
    #     [LdapEntryType.User, () => translate('entity-info-resolver.user')],
    #     [LdapEntryType.Group, () => translate('entity-info-resolver.security-group')],
    #     [LdapEntryType.OU, () => translate('entity-info-resolver.organizational-unit')],
    #     [LdapEntryType.Computer, () => translate('entity-info-resolver.computer')],
    #     [LdapEntryType.Rule, () => translate('entity-info-resolver.rule')],
    #   ]);

    #   private static TypeMap = new Map<string, LdapEntryType>([
    #     ['user', LdapEntryType.User],
    #     ['group', LdapEntryType.Group],
    #     ['organizationalUnit', LdapEntryType.OU],
    #     ['computer', LdapEntryType.Computer],
    #     ['sudoRole', LdapEntryType.Rule],
    #   ]);

    # entry_data = [
    #     {
    #         "name": "Root",
    #         "is_system": True,
    #         "object_class_names": [str, str, str],
    #     },
    # ]
    # for entry_data in entries_data:
    #     entry = Entry(entry_data["name"], entry_data["is_system"])
    #     object_classes = get_object_class_names(entry_data["object_class_names"])
    #     entry.object_classes.extend(object_classes)

    # 2 map entry and directory
    # directories = Directory.all()
    # for directory in directories:
    #     calculate entry()
    #     directory.entry_id = entry.id


def downgrade() -> None:
    """Downgrade database schema and data back to the previous state."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("ObjectClasses_oid_uc", "ObjectClasses", type_="unique")
    op.create_index(
        "ix_ObjectClasses_oid",
        "ObjectClasses",
        ["oid"],
        unique=True,
    )

    # TODO а это нужно?
    # op.alter_column(
    #     "ObjectClasses",
    #     "kind",
    #     existing_type=sa.Enum(
    #         "STRUCTURAL",
    #         "ABSTRACT",
    #         "AUXILIARY",
    #         native_enum=False,
    #     ),
    #     type_=postgresql.ENUM(
    #         "AUXILIARY",
    #         "STRUCTURAL",
    #         "ABSTRACT",
    #         name="objectclasskinds",
    #     ),
    #     existing_nullable=False,
    # )
    op.drop_constraint(
        "Directory_entry_id_fkey",
        "Directory",
        type_="foreignkey",
    )
    op.drop_index(op.f("ix_Directory_entry_id"), table_name="Directory")

    if has_column("Directory", "entry_id", op.get_bind()):
        op.add_column(
            "Directory",
            sa.Column("entry_id", sa.Integer(), nullable=True),
        )
    op.drop_constraint(
        "AttributeTypes_oid_uc",
        "AttributeTypes",
        type_="unique",
    )
    op.create_index(
        "ix_AttributeTypes_oid",
        "AttributeTypes",
        ["oid"],
        unique=True,
    )

    op.drop_table("EntryObjectClassMemberships")
    op.drop_table("Entries")
    # ### end Alembic commands ###
