name: build
on:
  release:
    types: [published]

env:
  REPO: ${{ github.repository }}

jobs:
  build-ssh:
    runs-on: ubuntu-latest
    steps:
      - name: downcase REPO
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build docker image
        env:
          TAG: ghcr.io/${{ env.REPO }}_ssh_test:latest
          DOCKER_BUILDKIT: '1'
        run: |
          echo $TAG
          docker build integration_tests/ssh --tag $TAG --cache-from $TAG --build-arg BUILDKIT_INLINE_CACHE=1
          docker push $TAG

  build-tests:
    runs-on: ubuntu-latest
    steps:
      - name: downcase REPO
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build docker image
        env:
          TAG: ghcr.io/${{ env.REPO }}_test:latest
          DOCKER_BUILDKIT: '1'
        run: |
          echo $TAG
          docker build --push --target=runtime -f .docker/test.Dockerfile . -t $TAG --cache-to type=gha,mode=max --cache-from $TAG --build-arg BUILDKIT_INLINE_CACHE=1


  run-ssh-test:
    runs-on: ubuntu-latest
    needs: [build-tests, build-ssh]
    steps:
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull tests
        run: cd integration_tests/ssh && docker-compose pull
      - name: run test enviroment
        run: cd integration_tests/ssh && docker-compose up -d
      - name: run ssh test
        run: cd integration_tests/ssh && ./run.sh
      - name: shutdown test enviroment
        run: cd integration_tests/ssh && docker-compose up -d

  run-tests:
    runs-on: ubuntu-latest
    needs: build-tests
    steps:
      - name: downcase REPO
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull tests
        env:
          TAG: ghcr.io/${{ env.REPO }}_test:latest
        run: docker-compose -f docker-compose.remote.test.yml pull
      - name: Run tests
        env:
          TAG: ghcr.io/${{ env.REPO }}_test:latest
        run: docker-compose -f docker-compose.remote.test.yml up
      - name: Teardown tests
        env:
          TAG: ghcr.io/${{ env.REPO }}_test:latest
        run: docker-compose -f docker-compose.remote.test.yml down

  build-app:
    runs-on: ubuntu-latest
    needs: [build-tests, run-ssh-test, run-tests]
    steps:
      - name: downcase REPO
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build docker image
        env:
          TAG: ghcr.io/${{ env.REPO }}:latest
          TAG2: ghcr.io/${{ env.REPO }}:${{ github.ref_name }}
          DOCKER_BUILDKIT: '1'
        run: |
          echo $TAG
          echo $TAG2
          docker build --push --target=runtime -f .docker/Dockerfile . -t $TAG -t $TAG2 --cache-to type=gha,mode=max --cache-from $TAG --build-arg BUILDKIT_INLINE_CACHE=1

  create-artifact:
    runs-on: ubuntu-latest
    needs: [build-tests, run-ssh-test, run-tests]
    steps:
      - uses: actions/checkout@v2
      - name: linux artifact for deployment
        run: zip md-linux.zip ./.package/docker-compose.yml ./.package/setup.sh

      - name: windows artifact for deployment
        run: zip md-windows.zip ./.package/docker-compose.yml ./.package/setup.bat

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Linux Release Asset
        id: upload-linux-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./md-linux.zip
          asset_name: md-linux.zip
          asset_content_type: application/zip

      - name: Upload Windows Release Asset
        id: upload-windows-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./md-windows.zip
          asset_name: md-windows.zip
          asset_content_type: application/zip