[tool.poetry]
name = "MultiDirectory"
version = "2.0.1"
description = ""
authors = ["Mastermind-U <rex49513@gmail.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "3.12.6"
alembic = "^1.12.1"
asn1 = "^2.7.1"
asyncstdlib = "^3.10.6"
bcrypt = "4.0.1"
dishka = "1.3.0"
dnspython = "^2.7.0"
fastapi = "^0.115.0"
httpx = "^0.27.2"
jinja2 = "^3.1.4"
ldap-filter = "^1.0.1"
loguru = "^0.7.2"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
psycopg = {extras = ["binary", "pool"], version = "^3.2.3"}
pydantic = "^2.9.2"
pydantic-settings = "^2.6.1"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.17"
pytz = "^2022.7.1"
sqlalchemy = {extras = ["asyncio", "mypy"], version = "^2.0.35"}
uvicorn = "^0.32.0"
uvloop = "^0.21.0"
websockets = "^14.0"

[tool.poetry.group.linters.dependencies]
flake8 = "7.1.1"
flake8-awesome = "^1.3.0"
flake8-commas = "^4.0.0"
flake8-docstrings = "^1.6.0"
flake8-isort = "^6.1.1"
flake8-pytest = "^1.4"
isort = "^5.13.2"
mypy = "^1.13.0"
ruff = "0.9.3"
types-pytz = "^2022.7.1.0"

[tool.poetry.group.test.dependencies]
coverage = "7.6.4"
gevent = "^24.10.3"
ldap3 = "^2.9.1"
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-cov = "^4.1.0"

[tool.poetry.group.dev.dependencies]
py-hot-reload = "^1.0.6"
watchdog = "4.0.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
known_first_party = [
    "ldap_protocol",
    "client",
    "config",
    "models",
    "api",
    "security",
    "tests",
    "web_app",
    "ioc",
    "schedule",
    "extra",
]
include_trailing_comma = true
line_length = 79
multi_line_output = 3

[tool.mypy]
plugins = ["sqlalchemy.ext.mypy.plugin", "pydantic.mypy"]
ignore_missing_imports = true
platform = "linux"
disallow_untyped_defs = true
exclude = ["app/alembic", "alembic"]
show_column_numbers = true
pretty = true
warn_unreachable = true
color_output = true
warn_unused_ignores = true

[tool.pytest.ini_options]
pythonpath = ["app"]
addopts = [
    "--cov",
    "--cov-report=term-missing:skip-covered"
]
asyncio_mode = "auto"

[tool.coverage.report]
show_missing = true

[tool.coverage.run]
concurrency = ["thread", "gevent"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 79
indent-width = 4

target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
