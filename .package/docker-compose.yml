# Copyright (c) 2024 MultiFactor
# License: https://github.com/MultiDirectoryLab/MultiDirectory/blob/main/LICENSE

services:
  traefik:
    image: "mirror.gcr.io/traefik:v3.3.4"
    container_name: traefik
    restart: unless-stopped
    command:
      # - --metrics
      # - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      - "--providers.file.filename=/traefik.yml"
    ports:
      - "53:53"
      - "80:80"
      - "389:389"
      - "443:443"
      - "464:464"
      - "636:636"
      - "749:749"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./certs:/letsencrypt
      - "./traefik.yml:/traefik.yml"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 96M
        reservations:
          cpus: '0.25'
          memory: 32M

  interface:
    image: ghcr.io/multidirectorylab/multidirectory-web-admin:${VERSION:-latest}
    container_name: multidirectory_interface
    restart: unless-stopped
    hostname: interface
    environment:
      API_URL: https://${DOMAIN}/api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.interface.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.interface.entrypoints=websecure"
      - "traefik.http.routers.interface.tls=true"
      - "traefik.http.routers.interface.tls.certresolver=md-resolver"
      - "traefik.http.services.interface.loadbalancer.server.port=80"
    depends_on:
      - api_server

  migrations:
    image: ghcr.io/multidirectorylab/multidirectory:${VERSION:-latest}
    container_name: multidirectory_migrations
    restart: "no"
    env_file:
      .env
    command: alembic upgrade head
    depends_on:
      postgres:
        condition: service_healthy

  ldap_server:
    image: ghcr.io/multidirectorylab/multidirectory:${VERSION:-latest}
    restart: unless-stopped
    hostname: multidirectory-ldap
    env_file:
      .env
    volumes:
      - ./certs:/certs
      - ./logs:/app/logs
      - ldap_keytab:/LDAP_keytab/
    command: python -OO multidirectory.py --ldap
    depends_on:
      migrations:
        condition: service_completed_successfully
    deploy:
      mode: replicated
      replicas: 4
      endpoint_mode: dnsrr
      resources:
        reservations:
          cpus: '0.25'
          memory: 100M
    healthcheck:
      test: ["CMD-SHELL", "nc -zv 127.0.0.1 389 636"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 3s

    labels:
      - traefik.enable=true

      - traefik.tcp.routers.ldap.rule=HostSNI(`*`)
      - traefik.tcp.routers.ldap.entrypoints=ldap
      - traefik.tcp.routers.ldap.service=ldap
      - traefik.tcp.services.ldap.loadbalancer.server.port=389
      - traefik.tcp.services.ldap.loadbalancer.proxyprotocol.version=2

      - traefik.tcp.routers.ldaps.rule=HostSNI(`*`)
      - traefik.tcp.routers.ldaps.entrypoints=ldaps
      - traefik.tcp.routers.ldaps.service=ldaps
      - traefik.tcp.routers.ldaps.tls=true
      - traefik.tcp.routers.ldaps.tls.certResolver=md-resolver
      - traefik.tcp.services.ldaps.loadbalancer.server.port=636
      - traefik.tcp.services.ldaps.loadbalancer.proxyprotocol.version=2

  api_server:
    image: ghcr.io/multidirectorylab/multidirectory:${VERSION:-latest}
    container_name: multidirectory_api
    restart: unless-stopped
    env_file:
      .env
    volumes:
      - ./logs:/app/logs
      - ./certs:/certs
      - dns_server_file:/DNS_server_file/
      - dns_server_config:/DNS_server_configs/
      - ldap_keytab:/LDAP_keytab/
    hostname: api_server
    environment:
      USE_CORE_TLS: 1
      KRB5_LDAP_URI: ldap://ldap_server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.tls.certresolver=md-resolver"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.routers.api.middlewares=api_strip"
      - "traefik.http.middlewares.api_strip.stripprefix.prefixes=/api"
      - "traefik.http.middlewares.api_strip.stripprefix.forceslash=false"

    command: python multidirectory.py --http
    depends_on:
      migrations:
        condition: service_completed_successfully

  postgres:
    container_name: MD-postgres
    image: mirror.gcr.io/postgres:16
    restart: unless-stopped
    env_file:
      .env
    environment:
      PGDATA: /data/postgres
    volumes:
       - postgres:/data/postgres
    expose:
      - 5432

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U ${POSTGRES_USER}"]
      interval: 6s
      timeout: 60s
      retries: 10
      start_period: 5s

  cert_check:
    image: ghcr.io/multidirectorylab/multidirectory:${VERSION:-latest}
    container_name: multidirectory_certs_check
    restart: "no"
    volumes:
      - ./certs:/certs
    command: ./extra/generate_cert.sh

  maintence:
    image: ghcr.io/multidirectorylab/multidirectory:${VERSION:-latest}
    container_name: md_maintence
    restart: unless-stopped
    volumes:
      - ./certs:/certs
      - psync_queue:/var/spool/krb5-sync
      - ldap_keytab:/LDAP_keytab/
    env_file:
      .env
    command: python multidirectory.py --scheduler
    tty: true
    depends_on:
      migrations:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 100M
        reservations:
          cpus: '0.1'
          memory: 6M

  kdc:
    container_name: kdc
    restart: unless-stopped
    hostname: kerberos
    volumes:
      - kdc:/etc
    image: ghcr.io/multidirectorylab/multidirectory_kerberos:${VERSION:-latest}
    tty: true
    depends_on:
      - ldap_server
    command: krb5kdc -n -w 4
    ports:
      - "88:88"
      - "88:88/udp"

  kadmin_api:
    image: ghcr.io/multidirectorylab/multidirectory_kerberos:${VERSION:-latest}
    container_name: kadmin_api
    restart: unless-stopped
    volumes:
      - ./certs:/certs
      - kdc:/etc
    tty: true
    depends_on:
      ldap_server:
        condition: service_healthy
      cert_check:
        condition: service_completed_successfully
    working_dir: /server
    command: uvicorn --factory config_server:create_app
             --host 0.0.0.0 --ssl-keyfile=/certs/krbkey.pem
             --ssl-certfile=/certs/krbcert.pem

  kadmind:
    image: ghcr.io/multidirectorylab/multidirectory_kerberos:${VERSION:-latest}
    container_name: kadmind
    restart: unless-stopped
    hostname: kerberos
    volumes:
      - kdc:/etc
      - psync_queue:/var/spool/krb5-sync
    tty: true
    depends_on:
      - ldap_server
      - kdc
    command: kadmind -nofork
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.kadmind.rule=HostSNI(`*`)
      - traefik.tcp.routers.kadmind.entrypoints=kadmind
      - traefik.tcp.routers.kadmind.service=kadmind
      - traefik.tcp.services.kadmind.loadbalancer.server.port=749

      - traefik.tcp.routers.kpasswd.rule=HostSNI(`*`)
      - traefik.tcp.routers.kpasswd.entrypoints=kpasswd
      - traefik.tcp.routers.kpasswd.service=kpasswd
      - traefik.tcp.services.kpasswd.loadbalancer.server.port=464

  bind_dns:
    image: mirror.gcr.io/ubuntu/bind9:9.18-24.04_edge
    container_name: bind9
    hostname: bind9
    restart: unless-stopped
    volumes:
      - dns_server_file:/opt/
      - dns_server_config:/etc/bind/
    tty: true
    depends_on:
      ldap_server:
        condition: service_healthy
        restart: true
    command: bash -c "chown bind:bind /opt && test -f /opt/zone.key && echo 'KEY EXISTS, SKIPPING...' || tsig-keygen zone. > /opt/zone.key && source docker-entrypoint.sh"
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.bind_dns.rule=HostSNI(`*`)
      - traefik.tcp.routers.bind_dns.entrypoints=bind_dns
      - traefik.tcp.routers.bind_dns.service=bind_dns
      - traefik.tcp.services.bind_dns.loadbalancer.server.port=53

  dragonfly_mem:
    image: 'docker.dragonflydb.io/dragonflydb/dragonfly'
    container_name: dragonfly
    volumes:
      - dragonflydata:/data
    expose:
      - 6379
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 6GiB
        reservations:
          cpus: '0.75'
          memory: 1.5GiB

  shadow_api:
    image: ghcr.io/multidirectorylab/multidirectory:${VERSION:-latest}
    container_name: shadow_api
    restart: unless-stopped
    tty: true
    env_file:
      .env
    depends_on:
      migrations:
        condition: service_completed_successfully
    command: python multidirectory.py --shadow

volumes:
  postgres:
  kdc:
  psync_queue:
  dns_server_file:
  dns_server_config:
  dragonflydata:
  ldap_keytab:
